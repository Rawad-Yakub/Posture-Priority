##Some useful things for the future:
## st.write_stream for outputting text generated by OpenAI
##
##
import streamlit as st  ##1.12.0 originally
import datetime
from datetime import date

# from streamlit_image_coordinates import streamlit_image_coordinates     ##manually select points for posture evaluation
# from streamlit_image_comparison import image_comparison                 ##compare two postures
# from streamlit_plotly_events import plotly_events                       ##interactively view data on graphs
import streamlit_authenticator as stauth  ##user auth. in YAML


import pymongo
from pymongo.mongo_client import MongoClient
from pymongo.server_api import ServerApi
##from pymongo_get_database import get_database

import s3fs
from st_files_connection import FilesConnection

import yaml
from yaml.loader import SafeLoader
from dontcommit import my_config

import cv2
import mediapipe as mp
import matplotlib.pyplot as plt
import math as m

st.set_page_config(
    page_title="Posture Priority",
    page_icon="ðŸš¶",
    layout="centered",
    initial_sidebar_state='auto'
)

currDate = str(date.today())

st.title('Posture Priority')
st.subheader(currDate)

##################################################

post = {

    "username": "temp3",
    "photo": "url",

    "date": currDate

}


##################################################

username, password, s3_key, s3_secret = my_config()

@st.cache_resource()
def init_connection():
    uri = "mongodb+srv://" + username + ":" + password + "@capstonedbv1.wzzhaed.mongodb.net/?retryWrites=true&w=majority&appName=CapstoneDBv1"
    return uri

    # Create a new client and connect to the server


client = MongoClient(init_connection(), server_api=ServerApi('1'))

# Send a ping to confirm a successful connection
try:
    client.admin.command('ping')
    print("Pinged your deployment. You successfully connected to MongoDB!")
except Exception as e:
    print(e)
    st.write("Connection to database failed. Invalid credentials")

db = client.test_database
collection = db['test_PP']
##post_id = collection.insert_one(post).inserted_id
##post_id
##st.write(collection)


##################################################

##conn = st.connection('s3', type=FilesConnection)
##conn.read("posturepriorityawsbucket/abc123.png", input_format="png", ttl=600)
##st.image(test_photo)
##fs = s3fs.S3FileSystem(anon=False)
fs = s3fs.S3FileSystem(anon=False, key=s3_key, secret=s3_secret)

##################################################

with open('config.yaml') as file:
    config = yaml.load(file, Loader=SafeLoader)

authenticator = stauth.Authenticate(
    config['credentials'],
    config['cookie']['name'],
    config['cookie']['key'],
    config['cookie']['expiry_days'],
)

##temp vars for class or similar
dailyPhotoUploadPrompt = True

if st.session_state["authentication_status"]:
    ##authenticator.logout()
    st.write(f'Welcome *{st.session_state["name"]}*')
    loggedIn = True
    currUser = st.session_state["username"]
    ##activeDates = fs.open("posturepriorityawsbucket/"+currUser, mode='rb').read()

    if dailyPhotoUploadPrompt:
        uploaded_file = st.file_uploader("Upload a photo for today")
        if uploaded_file is not None:
            bytes_data = uploaded_file.getvalue()
            st.image(bytes_data)

            s3 = s3fs.S3FileSystem(anon=False)  # uses default credentials
            if st.button("Upload this photo?"):
                dailyPhotoUpload = False
                with fs.open('posturepriorityawsbucket/' + currUser + '_' + currDate, 'wb') as f:
                    f.write(bytes_data)
    else:
        ## jank
        if st.button("View or edit a certain day?"):
            d = st.date_input("Choose a date")
            if d in activeDates:
                st.write("A photo was uploaded on this day")
            else:
                st.write("N/a")




else:
    st.subheader("Log in or sign up to get started")
    st.page_link("pages/Login.py", label="Log in here", icon="ðŸ’¾")

st.image(fs.open("posturepriorityawsbucket/abc123.png", mode='rb').read())


##st.write(db)

##print(client.list_database_names())

##@st.cache_resource()
##def init_connection():
##    return MongoClient("mongodb+srv://st.secrets.db_username:st.secrets.db_pswd@st.secrets.cluster_name.n4ycr4f.mongodb.net/?retryWrites=true&w=majority")

##client = init_connection()

#### MODEL I THINK ###

mp_pose = mp.solutions.pose
mp_drawing = mp.solutions.drawing_utils
pose = mp_pose.Pose(static_image_mode=True, min_detection_confidence=0.5, min_tracking_confidence=0.5)

# Local file, have to change
image = cv2.imread('test.jpg')
image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

results = pose.process(image_rgb)

# Draw landmarks on the image
annotated_image = image.copy()
if results.pose_landmarks:
    mp_drawing.draw_landmarks(annotated_image, results.pose_landmarks, mp_pose.POSE_CONNECTIONS)

# Display the annotated image
st.image(annotated_image, channels="RGB")


def findAngle(x1, y1, x2, y2):
    theta = m.acos( (y2 -y1)*(-y1) / (m.sqrt(
        (x2 - x1)**2 + (y2 - y1)**2 ) * y1) )
    degree = int(180/m.pi)*theta
    return degree

h, w = image_rgb.shape[:2]

# Use lm and lmPose as representative of the following methods.
lm = results.pose_landmarks
lmPose = mp_pose.PoseLandmark
# Left shoulder.
l_shldr_x = int(lm.landmark[lmPose.LEFT_SHOULDER].x * w)
l_shldr_y = int(lm.landmark[lmPose.LEFT_SHOULDER].y * h)

# Right shoulder.
r_shldr_x = int(lm.landmark[lmPose.RIGHT_SHOULDER].x * w)
r_shldr_y = int(lm.landmark[lmPose.RIGHT_SHOULDER].y * h)

# Left ear.
l_ear_x = int(lm.landmark[lmPose.LEFT_EAR].x * w)
l_ear_y = int(lm.landmark[lmPose.LEFT_EAR].y * h)

# Left hip.
l_hip_x = int(lm.landmark[lmPose.LEFT_HIP].x * w)
l_hip_y = int(lm.landmark[lmPose.LEFT_HIP].y * h)

# Calculate angles.
neck_inclination = findAngle(l_shldr_x, l_shldr_y, l_ear_x, l_ear_y)
torso_inclination = findAngle(l_hip_x, l_hip_y, l_shldr_x, l_shldr_y)


# Put text, Posture and angle inclination.
# Text string for display.
angle_text_string = 'Neck : ' + str(int(neck_inclination)) + '  Torso : ' + str(int(torso_inclination))

if neck_inclination > 40 or neck_inclination > 10:
    st.write("bad posture")
else:
    st.write("good")
st.write(angle_text_string)