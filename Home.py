##Some useful things for the future:
## st.write_stream for outputting text generated by OpenAI
##
##
import streamlit as st ##1.12.0 originally
import datetime
from datetime import date

#from streamlit_image_coordinates import streamlit_image_coordinates     ##manually select points for posture evaluation
#from streamlit_image_comparison import image_comparison                 ##compare two postures
#from streamlit_plotly_events import plotly_events                       ##interactively view data on graphs
import streamlit_authenticator as stauth                                ##user auth. in YAML

import numpy as np
##import openai
import plotly.express as px                                             
import pandas as pd

import pymongo
from pymongo.mongo_client import MongoClient
from pymongo.server_api import ServerApi
##from pymongo_get_database import get_database

import s3fs
from st_files_connection import FilesConnection

import yaml
from yaml.loader import SafeLoader
from dontcommit import my_config

st.set_page_config(
    page_title="Posture Priority",
    page_icon="ðŸš¶",
    layout="centered",
    initial_sidebar_state='auto'
)

CURR_DATE = str(date.today())
st.title('Posture Priority')
st.subheader("Today is " + CURR_DATE[6:])
username, password, s3_key, s3_secret = my_config()

@st.cache_resource()
def init_connection():
    uri = "mongodb+srv://"+ username + ":" + password + "@capstonedbv1.wzzhaed.mongodb.net/?retryWrites=true&w=majority&appName=CapstoneDBv1"# Create a new client and connect to the server
    return uri

client = MongoClient(init_connection(), server_api=ServerApi('1')) 

# Send a ping to confirm a successful connection  
try:
    client.admin.command('ping')
    print("Pinged your deployment. You successfully connected to MongoDB!")
except Exception as e:
    print(e)
    st.write("Connection to database failed. Invalid credentials")

db = client.test_database
collection = db['test_PP']

fs = s3fs.S3FileSystem(anon=False, key=s3_key, secret=s3_secret)

##################################################
#this is gonna be in cloud or db for end product v
with open('config.yaml') as file:
    config = yaml.load(file, Loader=SafeLoader)

authenticator = stauth.Authenticate(
    config['credentials'],
    config['cookie']['name'],
    config['cookie']['key'],
    config['cookie']['expiry_days'],
    config['preauthorized']
)

##temp vars for class or similar
dailyPhotoUploadPrompt = True

if st.session_state["authentication_status"]:
    ##authenticator.logout()
    st.write(f'Welcome *{st.session_state["name"]}*')
    loggedIn = True
    currUser = st.session_state["username"]
    ##activeDates = fs.open("posturepriorityawsbucket/"+currUser, mode='rb').read()

    if dailyPhotoUploadPrompt:
        uploaded_file = st.file_uploader("Upload a photo for today")
        if uploaded_file is not None:
            bytes_data = uploaded_file.getvalue()
            st.image(bytes_data)

            s3 = s3fs.S3FileSystem(anon=False)                                              ##uses default credentials
            if st.button("Upload this photo?"):
                img_path_bucket = 'posturepriorityawsbucket/'+currUser+'_'+CURR_DATE
                with fs.open(img_path_bucket, 'wb') as f: ##insert photo to s3 cloud
                    f.write(bytes_data)
                    
                post = {
                    "username": currUser,
                    "photo": img_path_bucket,
                    "date": CURR_DATE
                }
                collection.insert_one(post) ##.inserted_id                                  ##insert post to db
                dailyPhotoUploadPrompt = False
                
    st.header("Or, view an existing photo")

    ## jank
    d = st.date_input("Select a date")
    photo_posted = collection.find_one({"date": str(d), "username": currUser})
        
    if photo_posted:
        st.write("A photo was uploaded on this day")
        view_photo = fs.open("posturepriorityawsbucket/"+currUser + '_' + CURR_DATE, mode='rb').read()
        st.image(view_photo)
            
    else:
        st.write("No photo was uploaded on this day")


else:
    st.subheader("Log in or sign up to get started")
    st.page_link("pages/Login.py", label="Log in here", icon="ðŸ’¾")


    