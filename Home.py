##Some useful things for the future:
## st.write_stream for outputting text generated by OpenAI
##
##
import streamlit as st  ##1.12.0 originally
import datetime
from datetime import date
import matplotlib.pyplot as plt 


# from streamlit_image_coordinates import streamlit_image_coordinates     ##manually select points for posture evaluation
# from streamlit_image_comparison import image_comparison                 ##compare two postures
# from streamlit_plotly_events import plotly_events                       ##interactively view data on graphs
import streamlit_authenticator as stauth  ##user auth. in YAML

import numpy as np
##import openai
import plotly.express as px
import pandas as pd
import mediapipe as mp
import cv2


import pymongo
from pymongo.mongo_client import MongoClient
from pymongo.server_api import ServerApi
##from pymongo_get_database import get_database

import s3fs
from st_files_connection import FilesConnection
from dontcommit import my_config

import yaml
from yaml.loader import SafeLoader

st.set_page_config(
    page_title="Posture Priority",
    page_icon="ðŸš¶",
    layout="centered",
    initial_sidebar_state='auto'
)

currDate = str(date.today())

st.title('Posture Priority')
st.subheader(currDate)

##################################################

post = {

    "username": "temp3",
    "photo": "url",

    "date": currDate

}


username, password, s3_key, s3_secret = my_config()

@st.cache_resource()
def init_connection():
    uri ="mongodb+srv://"+username+ ":"+password + "@capstonedbv1.wzzhaed.mongodb.net/?retryWrites=true&w=majority&appName=CapstoneDBv1"# Create a new client and connect to the server
    return uri

client = MongoClient(init_connection(), server_api=ServerApi('1'))

# Send a ping to confirm a successful connection
try:
    client.admin.command('ping')
    print("Pinged your deployment. You successfully connected to MongoDB!")
except Exception as e:
    print(e)
    st.write("Connection to database failed. Invalid credentials")

db = client.test_database
collection = db['test_PP']
##post_id = collection.insert_one(post).inserted_id
##post_id
##st.write(collection)


##################################################

##conn = st.connection('s3', type=FilesConnection)
##conn.read("posturepriorityawsbucket/abc123.png", input_format="png", ttl=600)
##st.image(test_photo)
##fs = s3fs.S3FileSystem(anon=False)
fs = s3fs.S3FileSystem(anon=False, key=s3_key, secret=s3_secret)

##################################################

with open('config.yaml') as file:
    config = yaml.load(file, Loader=SafeLoader)

authenticator = stauth.Authenticate(
    config['credentials'],
    config['cookie']['name'],
    config['cookie']['key'],
    config['cookie']['expiry_days'],
)

##temp vars for class or similar
dailyPhotoUploadPrompt = True

if st.session_state["authentication_status"]:
    ##authenticator.logout()
    st.write(f'Welcome *{st.session_state["name"]}*')
    loggedIn = True
    currUser = st.session_state["username"]
    ##activeDates = fs.open("posturepriorityawsbucket/"+currUser, mode='rb').read()

    if dailyPhotoUploadPrompt:
        uploaded_file = st.file_uploader("Upload a photo for today")
        if uploaded_file is not None:
            bytes_data = uploaded_file.getvalue()
            st.image(bytes_data)

            s3 = s3fs.S3FileSystem(anon=False)  # uses default credentials
            if st.button("Upload this photo?"):
                dailyPhotoUpload = False
                with fs.open('posturepriorityawsbucket/' + currUser + '_' + currDate, 'wb') as f:
                    f.write(bytes_data)
    else:
        ## jank
        if st.button("View or edit a certain day?"):
            d = st.date_input("Choose a date")
            if d in activeDates:
                st.write("A photo was uploaded on this day")
            else:
                st.write("N/a")




else:
    st.subheader("Log in or sign up to get started")
    st.page_link("pages/Login.py", label="Log in here", icon="ðŸ’¾")

st.image(fs.open("posturepriorityawsbucket/abc123.png", mode='rb').read())


##st.write(db)

##print(client.list_database_names())

##@st.cache_resource()
##def init_connection():
##    return MongoClient("mongodb+srv://st.secrets.db_username:st.secrets.db_pswd@st.secrets.cluster_name.n4ycr4f.mongodb.net/?retryWrites=true&w=majority")

##client = init_connection()

#### MODEL I THINK ###
# Initialize MediaPipe modules
# Initialize MediaPipe modules
mp_pose = mp.solutions.pose
mp_drawing = mp.solutions.drawing_utils

# Function to process uploaded image and detect landmarks
def process_image(image):
    with mp_pose.Pose(static_image_mode=True, min_detection_confidence=0.5, min_tracking_confidence=0.5) as pose:  # Adjust confidence thresholds as needed
        results = pose.process(image)
        return results.pose_landmarks

# Function to draw landmarks and connections on the image
def draw_landmarks(image, landmarks):
    annotated_img = image.copy()
    point_spec = mp_drawing.DrawingSpec(color=(220, 100, 0), thickness=-1, circle_radius=5)
    line_spec = mp_drawing.DrawingSpec(color=(0, 255, 0), thickness=2)
    mp_drawing.draw_landmarks(
        annotated_img,
        landmark_list=landmarks,
        connections=mp_pose.POSE_CONNECTIONS,
        landmark_drawing_spec=point_spec,
        connection_drawing_spec=line_spec
    )
    return annotated_img

# Function to extract landmark coordinates
def extract_landmark_coordinates(landmarks, img_width, img_height):
    l_knee_x = int(landmarks.landmark[mp_pose.PoseLandmark.LEFT_KNEE].x * img_width)
    l_knee_y = int(landmarks.landmark[mp_pose.PoseLandmark.LEFT_KNEE].y * img_height)
    # Extract other landmark coordinates similarly...
    return l_knee_x, l_knee_y  # Return coordinates of the left knee

# Function to visualize landmark coordinates
def visualize_landmark_coordinates(image, l_knee_x, l_knee_y):
    fig, ax = plt.subplots()
    ax.imshow(image[:, :, ::-1])
    ax.plot(l_knee_x, l_knee_y, 'ro')  # Plot left knee coordinates
    plt.show()

# Main Streamlit app logic
if __name__ == "__main__":
    # Page title and header
    curr_date = str(date.today())
    st.title('Posture Priority')
    st.subheader(curr_date)

    # File upload section
    uploaded_file = st.file_uploader("Upload a photo for today")
    if uploaded_file is not None:
        image = np.array(bytearray(uploaded_file.read()), dtype=np.uint8)
        image = cv2.imdecode(image, cv2.IMREAD_COLOR)

        # Detect landmarks and draw on the image
        landmarks = process_image(image)
        annotated_image = draw_landmarks(image, landmarks)
        st.image(annotated_image, channels="BGR", caption="Landmarks and Connections Detected")

        # Extract and print landmark coordinates
        img_width, img_height = image.shape[1], image.shape[0]
        l_knee_x, l_knee_y = extract_landmark_coordinates(landmarks, img_width, img_height)
        st.write(f"Left knee coordinates: ({l_knee_x}, {l_knee_y})")

        # Visualize landmark coordinates on the image
        visualize_landmark_coordinates(image, l_knee_x, l_knee_y)
